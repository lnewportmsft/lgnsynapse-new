{
	"name": "DataflowBronzeToSilver",
	"properties": {
		"folder": {
			"name": "Delta Loading/Silver"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "BronzeDelta"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "SilverDelta"
				}
			],
			"transformations": [
				{
					"name": "AddMetadataColumns"
				},
				{
					"name": "RankRowVersions"
				},
				{
					"name": "Deduplicate"
				},
				{
					"name": "RemoveMetadataColumns"
				}
			],
			"scriptLines": [
				"parameters{",
				"     SourceTableName as string (\"\"),",
				"     TargetTableName as string (\"\"),",
				"     PrimaryKey as string (\"\"),",
				"     TimestampColumn as string (\"\")",
				"}",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     container: 'lgnsynapsefs',",
				"     folderPath: (concat(\"delta/bronze/\",$SourceTableName,\"/\"))) ~> BronzeDelta",
				"BronzeDelta derive(PkColumn = byName($PrimaryKey),",
				"          TSColumn = byName($TimestampColumn)) ~> AddMetadataColumns",
				"AddMetadataColumns window(over(PkColumn),",
				"     desc(TSColumn, true),",
				"     RowVersion = denseRank()) ~> RankRowVersions",
				"RankRowVersions filter(RowVersion==1) ~> Deduplicate",
				"Deduplicate select(mapColumn(",
				"          each(match(name!=\"PkColumn\"&&name!=\"TSColumn\"&&name!=\"RowVersion\"))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemoveMetadataColumns",
				"RemoveMetadataColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     container: 'lgnsynapsefs',",
				"     folderPath: (concat(\"delta/silver/\",$TargetTableName,\"/\")),",
				"     truncate:true,",
				"     mergeSchema: false,",
				"     autoCompact: false,",
				"     optimizedWrite: false,",
				"     vacuum: 0,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SilverDelta"
			]
		}
	}
}